{"version":3,"sources":["Components/MailList/MailList.module.scss","Components/Folders/Folders.module.scss","Components/MailBody/MailBody.module.scss","Components/Header/Header.module.scss","UI/Badge/Badge.module.scss","Assets/Images/nomail.svg","Assets/Images/envelope.svg","Utils/models.tsx","Components/Header/Header.tsx","Store/MailContext.tsx","UI/Badge/Badge.tsx","Components/Folders/Folders.tsx","Components/MailList/MailList.tsx","Components/MailBody/MailBody.tsx","Components/Root.tsx","App.tsx","serviceWorker.ts","Store/MailStore.tsx","Store/MailProvider.tsx","index.tsx"],"names":["module","exports","FOLDER_TYPES","Header","props","className","classes","wrapper","icon","faWindows","iconStyles","size","titleStyles","MailContext","createContext","Badge","badgeStyles","children","Folders","observer","mailData","useContext","unreadCount","getUnreadCount","setFolder","selectedFolder","useState","contentOpen","setContentOpen","caratClickHandler","useCallback","prevState","folderJSX","useMemo","Object","keys","map","el","index","type","INBOX","faInbox","SPAM","faBan","DELETED","faTrashAlt","OTHER","faFolder","onClick","visited","innerIconStyles","navigationSection","categorySection","faCaretRight","iconRotated","join","footer","href","target","rel","faExternalLinkAlt","MailList","setID","deleteTheMail","readTheMail","selectedID","setFlags","flagIds","flagFilter","toggleFlagFilter","getMailData","getFilteredData","dropDownState","setDropDownState","mailOnClickHandler","mID","deleteClickHandler","mId","e","stopPropagation","envelopeClickHandler","flagClickHandler","onClickDropDown","onBlurDropDown","toggleOnFilterHandler","toggleOffFilterHandler","generateMailList","unread","notVisited","selected","bind","iconTitleWrapper","iconWrapper","iconDeleteStyles","faEnvelopeOpen","faEnvelope","iconEnvelopeStyles","faFlag","includes","iconFlagSelectedStyles","iconFlagStyles","subjectContent","subject","content","replace","flagSpan","faWindowClose","onBlur","tabIndex","faCaretDown","style","display","length","fallBackStyles","src","noMail","alt","toLowerCase","MailBody","mailJSON","find","mailContent","noMailContentWrapper","envelope","mainBody","profileHeader","outerFlex","faUserCircle","profileIconStyles","innerFlex","deleteIconStyles","dangerouslySetInnerHTML","__html","dangerousDiv","Root","App","Boolean","window","location","hostname","match","MailStore","observable","shallow","makeObservable","this","inboxData","spamData","deletedData","otherData","localStorageSync","data","toJS","filter","action","id","folderName","toggle","filteredDataClone","syncTheData","deletedMail","push","filteredData","flagIdsClone","Set","has","delete","add","Array","from","val","computed","_this","firstRun","autorun","existingStore","localStorage","getItem","set","JSON","parse","inboxJSONData","spamJSONData","setItem","stringify","mailStoreObj","MailProvider","Provider","value","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.73170d54.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MailList_wrapper__11WjJ\",\"flagSpan\":\"MailList_flagSpan__1KV_A\",\"selected\":\"MailList_selected__13JXR\",\"notVisited\":\"MailList_notVisited__34DPo\",\"iconTitleWrapper\":\"MailList_iconTitleWrapper__3f1Jy\",\"mId\":\"MailList_mId__3ju47\",\"iconWrapper\":\"MailList_iconWrapper__3O5YJ\",\"iconStyles\":\"MailList_iconStyles__1BUe1\",\"iconFlagSelectedStyles\":\"MailList_iconFlagSelectedStyles__31u09\",\"iconDeleteStyles\":\"MailList_iconDeleteStyles__3BJc7\",\"iconEnvelopeStyles\":\"MailList_iconEnvelopeStyles__3w-q0\",\"iconFlagStyles\":\"MailList_iconFlagStyles__nus_v\",\"subjectContent\":\"MailList_subjectContent__1Muwt\",\"fallBackStyles\":\"MailList_fallBackStyles__1wusH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Folders_wrapper__1TU13\",\"navigationSection\":\"Folders_navigationSection__2e0af\",\"categorySection\":\"Folders_categorySection__4Z1On\",\"visited\":\"Folders_visited__h5rbz\",\"iconStyles\":\"Folders_iconStyles__2Xnrk\",\"iconRotated\":\"Folders_iconRotated__PFTum\",\"innerIconStyles\":\"Folders_innerIconStyles__3IcKb\",\"footer\":\"Folders_footer__1Gc2S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MailBody_wrapper__1-_Bc\",\"noMailContentWrapper\":\"MailBody_noMailContentWrapper__1MT0K\",\"mainBody\":\"MailBody_mainBody__Kwabq\",\"profileHeader\":\"MailBody_profileHeader__3_nEC\",\"outerFlex\":\"MailBody_outerFlex__1FX--\",\"innerFlex\":\"MailBody_innerFlex__3zC2-\",\"profileIconStyles\":\"MailBody_profileIconStyles__38f87\",\"deleteIconStyles\":\"MailBody_deleteIconStyles__2wAkr\",\"dangerousDiv\":\"MailBody_dangerousDiv__2x8hD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Header_wrapper__3QMqs\",\"titleStyles\":\"Header_titleStyles__3x7ut\",\"iconStyles\":\"Header_iconStyles__230LT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"badgeStyles\":\"Badge_badgeStyles__IEqvA\"};","module.exports = __webpack_public_path__ + \"static/media/nomail.d9d021d5.svg\";","module.exports = __webpack_public_path__ + \"static/media/envelope.0b6ed872.svg\";","export interface mailStructure {\r\n    mId : string,\r\n    unread : boolean,\r\n    subject : string,\r\n    content : string\r\n}\r\n\r\nexport enum FOLDER_TYPES {INBOX = \"INBOX\", SPAM = \"SPAM\", DELETED = \"DELETED\", OTHER = \"OTHER FOLDER\"}","import React from 'react';\r\nimport classes from './Header.module.scss';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faWindows } from '@fortawesome/free-brands-svg-icons';\r\n\r\n// MAIN HEADER\r\nconst Header: React.FC = props => {\r\n    return (\r\n        <nav className={classes.wrapper}>\r\n            <FontAwesomeIcon icon={faWindows} className={classes.iconStyles} size=\"lg\"></FontAwesomeIcon>\r\n            <span className={classes.titleStyles}>OUTLOOK CLONE</span>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header;","import {createContext} from \"react\";\r\nimport {MailStore} from './../Store/MailStore';\r\n\r\nexport const MailContext = createContext<MailStore>({} as MailStore);\r\n","import React from 'react';\r\nimport classes from './Badge.module.scss';\r\n\r\nconst Badge: React.FC<React.PropsWithChildren<{}>> = props => {\r\n    return <span className={classes.badgeStyles}>{props.children}</span>\r\n}\r\n\r\nexport default Badge;","import React, { useState, useCallback, useContext, useMemo } from 'react';\r\nimport classes from './Folders.module.scss';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCaretRight, faInbox, faBan, faFolder, faExternalLinkAlt, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { MailContext } from './../../Store/MailContext';\r\nimport Badge from './../../UI/Badge/Badge';\r\nimport { FOLDER_TYPES } from './../../Utils/models';\r\n\r\n// FOLDERS DISPLAY - LHS\r\nconst Folders: React.FC = observer(props => {\r\n\r\n    // FETCHING DATA FROM STORE\r\n    const mailData = useContext(MailContext);\r\n    const unreadCount = mailData.getUnreadCount;\r\n    const { setFolder, selectedFolder } = mailData;\r\n\r\n    // STATE FOR OPENING THE CARAT - FOLDER COLLAPSIBLE\r\n    const [contentOpen, setContentOpen] = useState<boolean>(true);\r\n\r\n    // FOLDER TOGGLE HANDLER\r\n    const caratClickHandler = useCallback(() => {\r\n        setContentOpen((prevState) => {\r\n            return !prevState\r\n        })\r\n    }, [setContentOpen])\r\n\r\n    // CREATING THE FOLDER NAME AND UNREAD COUNT JSX \r\n    const folderJSX = useMemo(() => {\r\n        return Object.keys(FOLDER_TYPES).map((el, index) => {\r\n            let type = FOLDER_TYPES[el as keyof typeof FOLDER_TYPES];\r\n            let icon = null;\r\n            switch (type) {\r\n                case FOLDER_TYPES.INBOX:\r\n                    icon = faInbox;\r\n                    break;\r\n                case FOLDER_TYPES.SPAM:\r\n                    icon = faBan;\r\n                    break;\r\n                case FOLDER_TYPES.DELETED:\r\n                    icon = faTrashAlt;\r\n                    break;\r\n                case FOLDER_TYPES.OTHER:\r\n                    icon = faFolder\r\n                    break;\r\n                default:\r\n                    icon = faInbox;\r\n                    break;\r\n            }\r\n            return (\r\n                <li onClick={() => { setFolder(type) }} className={selectedFolder === type ? classes.visited : \"\"}>\r\n                    <span><FontAwesomeIcon icon={icon} className={classes.innerIconStyles} /> {type} </span>\r\n                    {unreadCount[index] > 0 && <Badge>{unreadCount[index]}</Badge>}\r\n                </li>\r\n            )\r\n        })\r\n    }, [unreadCount, selectedFolder, setFolder])\r\n\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <nav className={classes.navigationSection}>\r\n                <div className={classes.categorySection} onClick={caratClickHandler}>\r\n                    <FontAwesomeIcon icon={faCaretRight} className={[classes.iconStyles, contentOpen && classes.iconRotated].join(\" \")} size=\"lg\" />\r\n                    FOLDERS\r\n                </div>\r\n                {contentOpen && <ul>\r\n                    {folderJSX}\r\n                </ul >}\r\n            </nav >\r\n            <footer className={classes.footer}>\r\n                DESIGNED & DEVELOPED BY <a href=\"https://chandrahasballeda.com\" target=\"_blank\" rel=\"noopener noreferrer\"> <FontAwesomeIcon icon={faExternalLinkAlt} className={classes.innerIconStyles} /> CHANDRAHAS BALLEDA</a>\r\n            </footer>\r\n        </div >\r\n    )\r\n})\r\n\r\nexport default Folders;","import React, { useContext, useCallback, useState } from 'react';\r\nimport classes from './MailList.module.scss';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { MailContext } from './../../Store/MailContext';\r\nimport { faTrashAlt, faEnvelope, faEnvelopeOpen, faFlag, faWindowClose } from '@fortawesome/free-solid-svg-icons';\r\nimport noMail from './../../Assets/Images/nomail.svg';\r\nimport { FOLDER_TYPES } from './../../Utils/models';\r\n\r\n// MAIL LIST : LISTS ALL THE MAILS BASED ON SELECTION FROM FOLDERS\r\nconst MailList: React.FC = observer(props => {\r\n\r\n    // FETCHING DATA FROM STORE\r\n    const mailData = useContext(MailContext);\r\n    const { setID, deleteTheMail, selectedFolder, readTheMail, selectedID, setFlags, flagIds, flagFilter, toggleFlagFilter, getMailData, getFilteredData } = mailData;\r\n\r\n    // DROPDOWN STATE\r\n    const [dropDownState, setDropDownState] = useState<boolean>(false);\r\n\r\n    // MAIL CLICK HANDLER TO DISPLAY DATA ON RHS\r\n    const mailOnClickHandler = useCallback((mID: string) => {\r\n        setID(mID);\r\n        readTheMail(mID);\r\n    }, [setID, readTheMail])\r\n\r\n    // DELETE CLICK HANDLER\r\n    const deleteClickHandler = useCallback((mId: string, e: React.MouseEvent<SVGSVGElement, MouseEvent>) => {\r\n        e.stopPropagation();\r\n        deleteTheMail(mId);\r\n    }, [deleteTheMail])\r\n\r\n    // ENVELOPE ICONS CLICK HANDLER TO TOGGLE READ AND UNREAD STATES\r\n    const envelopeClickHandler = useCallback((mId: string, e: React.MouseEvent<SVGSVGElement, MouseEvent>) => {\r\n        e.stopPropagation();\r\n        readTheMail(mId, true);\r\n    }, [readTheMail])\r\n\r\n    // FLAG CLICK HANDLER - TO TOGGLE FLAG STATUS\r\n    const flagClickHandler = useCallback((mId: string, e: React.MouseEvent<SVGSVGElement, MouseEvent>) => {\r\n        e.stopPropagation();\r\n        setFlags(mId);\r\n    }, [setFlags])\r\n\r\n    // TO OPEN THE DROPDOWN ON CLICK HANDLER  \r\n    const onClickDropDown = useCallback(() => {\r\n        setDropDownState(prevState => !prevState);\r\n    }, [setDropDownState])\r\n\r\n    // TO CLOSE THE DROPDOWN WHEN CLICKED ELSEWHERE\r\n    const onBlurDropDown = useCallback((e: React.FocusEvent<HTMLDivElement>) => {\r\n        e.stopPropagation();\r\n        setDropDownState(false);\r\n    }, [setDropDownState])\r\n\r\n    // TO START THE FILTERING\r\n    const toggleOnFilterHandler = useCallback(() => {\r\n        toggleFlagFilter(true);\r\n        setDropDownState(false);\r\n    }, [toggleFlagFilter])\r\n\r\n    // TO STOP THE FILTERING\r\n    const toggleOffFilterHandler = useCallback(() => {\r\n        toggleFlagFilter(false);\r\n        setDropDownState(false);\r\n    }, [toggleFlagFilter, setDropDownState])\r\n\r\n    // GENERATING THE MAIL LIST - CHANGES BASED ON GENERAL OR FILTERED\r\n    const generateMailList = useCallback((): JSX.Element[] => {\r\n        return (\r\n            (flagFilter ? getFilteredData : getMailData).map((el, index) => {\r\n                return (\r\n                    <li className={[el.unread ? classes.notVisited : \"\", selectedID === el.mId ? classes.selected : \"\"].join(\" \")} onClick={mailOnClickHandler.bind(null, el.mId)}>\r\n                        <div className={classes.iconTitleWrapper}>\r\n                            <div className={classes.mId}>{el.mId}</div>\r\n                            <span className={classes.iconWrapper}>\r\n                                {(selectedFolder !== FOLDER_TYPES.DELETED) && <FontAwesomeIcon icon={faTrashAlt} size=\"sm\" className={[classes.iconStyles, classes.iconDeleteStyles].join(\" \")} onClick={deleteClickHandler.bind(null, el.mId)}></FontAwesomeIcon>}\r\n                                <FontAwesomeIcon icon={el.unread ? faEnvelopeOpen : faEnvelope} size=\"sm\" className={[classes.iconStyles, classes.iconEnvelopeStyles].join(\" \")} onClick={envelopeClickHandler.bind(null, el.mId)}></FontAwesomeIcon>\r\n                                <FontAwesomeIcon icon={faFlag} size=\"sm\" className={[classes.iconStyles, flagIds.includes(el.mId) ? classes.iconFlagSelectedStyles : \"\", classes.iconFlagStyles].join(\" \")} onClick={flagClickHandler.bind(null, el.mId)} ></FontAwesomeIcon>\r\n                            </span>\r\n                        </div>\r\n                        <div className={[classes.subjectContent, el.unread && classes.notVisited].join(\" \")}>{el.subject}</div>\r\n                        <div className={classes.subjectContent}>{el.content.replace(/<.*?>/ig, \"\")}</div>\r\n                    </li>\r\n                )\r\n            }))\r\n    }, [getMailData, getFilteredData, flagFilter, mailOnClickHandler, deleteClickHandler, envelopeClickHandler, flagClickHandler, selectedFolder, selectedID, flagIds])\r\n\r\n    // FALL BACK JSX WHEN NOTHING EXISTS\r\n    const fallBackJSX = (): JSX.Element => {\r\n        return (\r\n            <div className={classes.fallBackStyles}>\r\n                <img src={noMail} alt=\"nothing present here\" />\r\n                <span>Nothing in {mailData.selectedFolder.toLowerCase()}.</span>\r\n                <span>Looks empty over here!</span>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <header>\r\n                <span>\r\n                    {mailData.selectedFolder}\r\n                </span>\r\n                {flagFilter ?\r\n                    <span className={classes.flagSpan} onClick={toggleOffFilterHandler}>Flagged <FontAwesomeIcon icon={faWindowClose}></FontAwesomeIcon> </span> :\r\n                    <div onBlur={onBlurDropDown} onClick={onClickDropDown} tabIndex={1}>\r\n                        <span>Filter <FontAwesomeIcon icon={faCaretDown} /></span>\r\n                        <section style={{ display: dropDownState ? \"block\" : \"none\" }} onClick={(e: any) => { e.stopPropagation() }}>\r\n                            <span onClick={toggleOnFilterHandler}>Flag</span>\r\n                        </section>\r\n                    </div>}\r\n            </header>\r\n            <main>\r\n                <ul>\r\n                    {generateMailList().length ? generateMailList() : fallBackJSX()}\r\n                </ul>\r\n            </main>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MailList;","import React, { useMemo, useContext, useCallback } from 'react';\r\nimport classes from './MailBody.module.scss';\r\nimport envelope from './../../Assets/Images/envelope.svg';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { MailContext } from './../../Store/MailContext';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUserCircle, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FOLDER_TYPES } from './../../Utils/models';\r\n\r\n// MAIL BODY\r\nconst MailBody: React.FC = observer(props => {\r\n\r\n    // FETCHING DATA FROM STORE\r\n    const mailData = useContext(MailContext);\r\n    const { getMailData, selectedID, selectedFolder, deleteTheMail, flagFilter, getFilteredData } = mailData;\r\n\r\n    // FETCHING THE INDIVIDUAL DETAILS\r\n    const mailJSON = useMemo(() => {\r\n        return (flagFilter ? getFilteredData :getMailData)!.find(el => el.mId === selectedID);\r\n    }, [getMailData, selectedID, getFilteredData, flagFilter])\r\n\r\n    // DELETE CLICK HANDLER\r\n    const deleteClickHandler = useCallback((mId: string | undefined, e: React.MouseEvent<SVGSVGElement, MouseEvent>) => {\r\n        if (mId) {\r\n            deleteTheMail(mId);\r\n        }\r\n    }, [deleteTheMail])\r\n\r\n    // CREATING THE MAIL BODY\r\n    const mailContent = useMemo<JSX.Element | null>(() => {\r\n        if (flagFilter ? getFilteredData.length :getMailData.length) {\r\n            if (!selectedID) {\r\n                return (\r\n                    <section className={classes.noMailContentWrapper}>\r\n                        <img src={envelope} alt=\"no img\" />\r\n                        <div>Select an item to read</div>\r\n                        <div>Nothing is selected !</div>\r\n                    </section>\r\n                )\r\n            }\r\n            else if (mailJSON) {\r\n                return (\r\n                    <div className={classes.mainBody}>\r\n                        <header className={classes.profileHeader}>\r\n                            <div className={classes.outerFlex}>\r\n                                <FontAwesomeIcon size=\"3x\" icon={faUserCircle} className={classes.profileIconStyles}></FontAwesomeIcon>\r\n                                <div className={classes.innerFlex}>\r\n                                    <span>{mailJSON?.mId}</span>\r\n                                    <span>{mailJSON?.subject}</span>\r\n                                </div>\r\n                            </div>\r\n                            {(selectedFolder !== FOLDER_TYPES.DELETED) && <FontAwesomeIcon size=\"sm\" icon={faTrashAlt} className={classes.deleteIconStyles} onClick={deleteClickHandler.bind(null, mailJSON?.mId)}></FontAwesomeIcon>}\r\n                        </header>\r\n                        <hr />\r\n\r\n                        <main>\r\n                            <div dangerouslySetInnerHTML={{ __html: mailJSON.content }} className={classes.dangerousDiv}></div>\r\n                        </main>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n        return null;\r\n    }, [getMailData, selectedID, mailJSON, selectedFolder, deleteClickHandler, getFilteredData, flagFilter])\r\n\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            {mailContent}\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MailBody;","import React from 'react';\r\nimport './Root.scss';\r\n\r\n// IMPORTING COMPONENTS\r\nimport Header from './Header/Header';\r\nimport Folders from './Folders/Folders';\r\nimport MailList from './MailList/MailList';\r\nimport MailBody from './MailBody/MailBody';\r\n\r\n// ROOT FOLDER\r\nconst Root: React.FC = props => {\r\n\r\n    return (\r\n        <div className=\"root-wrapper\">\r\n            <section className=\"root-header\">\r\n                <Header></Header>\r\n            </section>\r\n            <section className=\"root-folders\">\r\n                <Folders></Folders>\r\n            </section>\r\n            <section className=\"root-maillist\">\r\n                <MailList></MailList>\r\n            </section>\r\n            <section className=\"root-mailbody\">\r\n                <MailBody></MailBody>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Root;","import React from 'react';\r\nimport './App.scss';\r\nimport Root from './Components/Root';\r\n\r\nvar App: React.FC = () => {\r\n  return (\r\n    <Root></Root>\r\n  )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { observable, action, makeObservable, toJS, computed } from 'mobx';\r\nimport { mailStructure, FOLDER_TYPES } from './../Utils/models';\r\nimport {localStorageSync} from './MailProvider'\r\n\r\nexport class MailStore {\r\n\r\n    @observable.shallow inboxData: mailStructure[];\r\n    @observable.shallow spamData: mailStructure[];\r\n    @observable.shallow deletedData: mailStructure[];\r\n    @observable.shallow otherData: mailStructure[];\r\n    @observable selectedID: string;\r\n    @observable selectedFolder: FOLDER_TYPES;\r\n    @observable flagIds: Array<string>;\r\n    @observable flagFilter: boolean;\r\n\r\n    constructor() {\r\n        makeObservable(this);\r\n        this.inboxData = [];\r\n        this.spamData = [];\r\n        this.deletedData = [];\r\n        this.otherData = [];\r\n        this.selectedID = \"\";\r\n        this.selectedFolder = FOLDER_TYPES.INBOX;\r\n        this.flagIds = [];\r\n        this.flagFilter = false;\r\n        localStorageSync(this);\r\n    }\r\n\r\n    // SET ID\r\n    @action\r\n    setID = (id: string) => {\r\n        this.selectedID = id;\r\n    }\r\n\r\n    // SET SELECTED FOLDER FOLDER\r\n    @action\r\n    setFolder = (folderName: FOLDER_TYPES) => {\r\n        this.selectedFolder = folderName;\r\n        this.selectedID = \"\";\r\n        this.flagFilter = false;\r\n    }\r\n\r\n    // MARK AS READ & UNREAD\r\n    @action\r\n    readTheMail = (mId: string, toggle: boolean = false,) => {\r\n        let filteredDataClone = this.getMailData.map(el => {\r\n            if (el.mId === mId) {\r\n                return {\r\n                    ...el, unread: toggle ? !el.unread : false\r\n                }\r\n            }\r\n            return el;\r\n        })\r\n        this.syncTheData(filteredDataClone);\r\n    }\r\n\r\n    // DELETE MAIL\r\n    @action\r\n    deleteTheMail = (mId: string) => {\r\n\r\n        if (mId === this.selectedID) {\r\n            this.selectedID = \"\"\r\n        }\r\n\r\n        // INSERTING THE MAIL INTO DELETED FOLDER\r\n        let deletedMail = this.getMailData.find(el => el.mId === mId);\r\n        if (deletedMail) {\r\n            this.deletedData.push(deletedMail)\r\n        }\r\n\r\n        // REMOVING THE MAIL FRON THE RESPECTIVE FOLDER\r\n        let filteredData = this.getMailData.filter(el => el.mId !== mId);\r\n        this.syncTheData(filteredData);\r\n\r\n    }\r\n\r\n    // SET THE FLAGS\r\n    @action\r\n    setFlags = (mId: string) => {\r\n        var flagIdsClone = new Set(this.flagIds);\r\n        flagIdsClone.has(mId) ? flagIdsClone.delete(mId) : flagIdsClone.add(mId);\r\n        this.flagIds = Array.from(flagIdsClone);\r\n    }\r\n\r\n    // TOGGLE FLAG FILTER\r\n    @action\r\n    toggleFlagFilter = (val: boolean) => {\r\n        this.flagFilter = val;\r\n        this.selectedID = this.flagIds.includes(this.selectedID) ? this.selectedID : \"\";\r\n    }\r\n\r\n    // COMMON SYNCING THE FILES INTO THE RESPECTIVE FOLDERS\r\n    @action\r\n    syncTheData(data: mailStructure[]) {\r\n        switch (this.selectedFolder) {\r\n            case FOLDER_TYPES.INBOX:\r\n                this.inboxData = data;\r\n                break;\r\n\r\n            case FOLDER_TYPES.SPAM:\r\n                this.spamData = data;\r\n                break;\r\n\r\n            case FOLDER_TYPES.DELETED:\r\n                this.deletedData = data;\r\n                break;\r\n\r\n            case FOLDER_TYPES.OTHER:\r\n                this.otherData = data;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    // ******** COMPUTED DATA ***********\r\n    // SET INBOX DATA\r\n    @computed\r\n    get getMailData() {\r\n        switch (this.selectedFolder) {\r\n\r\n            case FOLDER_TYPES.INBOX:\r\n                return toJS(this.inboxData);\r\n\r\n            case FOLDER_TYPES.SPAM:\r\n                return toJS(this.spamData);\r\n\r\n            case FOLDER_TYPES.DELETED:\r\n                return toJS(this.deletedData);\r\n\r\n            case FOLDER_TYPES.OTHER:\r\n                return toJS(this.otherData);\r\n\r\n            default:\r\n                return toJS(this.inboxData);\r\n        }\r\n    }\r\n\r\n    @computed\r\n    get getFilteredData() {\r\n        return this.getMailData.filter(el => this.flagIds.includes(el.mId))\r\n    }\r\n\r\n\r\n    @computed\r\n    get getUnreadCount() {\r\n        let inboxUnreadCount = toJS(this.inboxData).filter(el => el.unread).length;\r\n        let spamUnreadCount = toJS(this.spamData).filter(el => el.unread).length;\r\n        let deletedUnreadCount = toJS(this.deletedData).filter(el => el.unread).length;\r\n        let otherUnreadCount = toJS(this.otherData).filter(el => el.unread).length;\r\n        return [inboxUnreadCount, spamUnreadCount, deletedUnreadCount, otherUnreadCount]\r\n    }\r\n\r\n}\r\n\r\n","import React from 'react';\r\nimport { MailStore } from './MailStore';\r\nimport { MailContext } from './MailContext';\r\nimport { autorun, set, toJS } from 'mobx';\r\n\r\n// JSON Documents import\r\nimport inboxJSONData from './../Assets/JSONData/inbox.json';\r\nimport spamJSONData from './../Assets/JSONData/spam.json';\r\n\r\n// AUTO RUN - SYNCING DATA TO LOCAL STORAGE\r\nexport const localStorageSync = function (_this: MailStore) {\r\n    let firstRun = true;\r\n\r\n    // will run on change\r\n    autorun(() => {\r\n        // on load check if there's an existing store on localStorage and extend the store\r\n        if (firstRun) {\r\n            const existingStore = localStorage.getItem(\"OUTLOOK_CLONE\")\r\n            if (existingStore) {\r\n                set(_this, JSON.parse(existingStore))\r\n            }\r\n            else {\r\n                _this.inboxData = inboxJSONData;\r\n                _this.spamData = spamJSONData;\r\n            }\r\n        }\r\n        // from then on serialize and save to localStorage\r\n        localStorage.setItem(\"OUTLOOK_CLONE\", JSON.stringify(toJS(_this)));\r\n    })\r\n\r\n    firstRun = false\r\n}\r\n\r\nconst mailStoreObj = new MailStore()\r\n\r\nexport const MailProvider: React.FC<React.PropsWithChildren<{}>> = props => {\r\n    return <MailContext.Provider value={mailStoreObj}>\r\n        {props.children}\r\n    </MailContext.Provider>\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { MailProvider } from './Store/MailProvider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MailProvider>\n      <App />\n    </MailProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}